<?php
    function isNumberPositive($numberToCheck){
        return $numberToCheck > 0;
    }

    function isNumberNegative($numberToCheck){
        return $numberToCheck < 0;
    }

    function isNumberZero($numberToCheck){
        return $numberToCheck == 0;
    }

    function isNumberPrime($num){
        if ($num < 1 || is_int($num) == false){
            return false;
        }
        for ($i = 2; $i < $num; $i++){
            if ($num % $i == 0){
                return false;
            }
        }
        return true;    
    }
      
    function countArrayValuesByCallable(callable $callable, $array, $count = 0, $check = 0){
        $valueToCheck = $array[$count];
        if ($count < count($array)){
            if ($callable($valueToCheck) == true){
                return countArrayValuesByCallable($callable, $array, $count + 1, $check + 1);
            }
            return countArrayValuesByCallable($callable, $array, $count + 1, $check + 0);
        }
        return $check;
    }
    
    function arraySummary($values){
        $positiveNumbers = countArrayValuesByCallable("isNumberPositive", $values);
        $negativeNumbers = countArrayValuesByCallable("isNumberNegative", $values);
        $zeroNumbers = countArrayValuesByCallable("isNumberZero", $values);
        $primeNumbers = countArrayValuesByCallable("isNumberPrime", $values);
        return $arraySummary = [$positiveNumbers, $negativeNumbers, $zeroNumbers, $primeNumbers];
    }

    function percentageCount($array){
        $summary = arraySummary($array);
        $sum = count($array);
        for ($i = 0; $i < count($summary); $i++){
            $result[$i] = $summary[$i] / $sum * 100;
        }
        return $result;
    }

    function percentageCountRec($array, $count = 0){
        $summary = arraySummary($array);
        $sum = count($array);
        if ($count < count($summary)){
            $result[$count] = $summary[$count] / $sum * 100;
            return percentageCountRec($array, $count + 1);
        }
        return $result;
    }

    function sortArrayMinToMax($values){
        do{
            $switch = false;
            for ($i = 0; $i < count($values); $i++){
                if ($values[$i] > $values[$i + 1]){
                    $bubble = $values[$i];
                    $values[$i] = $values[$i + 1];
                    $values[$i + 1] = $bubble;
                    $switch = true;
                }
            }
        } while ($switch === true);
        return $values;
    }

    function sortArrayMaxToMin($values){
        do{
            $switch = false;
            for ($i = 0; $i < count($values); $i++){
                if ($values[$i] < $values[$i + 1]){
                    $bubble = $values[$i];
                    $values[$i] = $values[$i + 1];
                    $values[$i + 1] = $bubble;
                    $switch = true;
                }
            }
        } while ($switch === true);
        return $values;
    }
    
    function percentageCountByType($array, $numberType){
        $sum = count($array);
        $numbers = countArrayValuesByCallable("$numberType", $array);
        $result = $numbers / $sum * 100;
        return $result;
    }

    function recursiveOutput($array, &$result = ''){
        foreach ($array as $key => $value){
            $result .= $value;
            if (is_array($value)){
                recursiveOutput($value, $result);
            }
        }
        return $result;
    }

    function transposeArray(){
        for ($i = 0; $i < count($array); $i++){
            for ($j = $i + 1; $j < count($array); $j++){
                $bubble = $array[$i][$j];
                $array[$i][$j] = $array[$j][$i];
                $array[$j][$i] = $bubble;
            }
        }
        return $array;
    }

    function combineArray(){
        for ($i = 0; $i < count($arrayFirst); $i++){
            for ($j = 0; $j < count($arrayFirst); $j++){
                $arrayResult[$i][$j] = $arrayFirst[$i][$j] + $arraySecond[$i][$j];
            }
        }
        return $arrayResult;
    }
